#!/usr/bin/env node

/**
 * Export Production Database Script
 * 
 * This script exports data from the production database to a SQL file
 * that can be imported into the staging environment.
 * 
 * Usage: node scripts/export-production-data.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Set PATH to use PostgreSQL 17 tools
process.env.PATH = '/opt/homebrew/opt/postgresql@17/bin:' + process.env.PATH;

// Production database connection string
const PRODUCTION_DATABASE_URL = "postgresql://postgres.smbecqbnbqbqitpufvqs:bRP9o5mKBLcmP5Yf@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres";

// Output file path
const OUTPUT_FILE = path.join(__dirname, '..', 'local-docs', 'transfer-to-staging.sql');

// Tables to export (using actual PostgreSQL table names)
const TABLES_TO_EXPORT = [
  'User',
  'readings',
  'Card',
  'ReadingCard',
  'PaymentHistory',
  'PointTransaction',
  'CoinExchange',
  'Review',
  'Pack',
  'ExchangeSetting',
  'campaign_templates',
  'prestige_rewards',
  'referral_codes',
  'reward_configurations'
];

async function exportProductionData() {
  try {
    console.log('üöÄ Starting production data export...');
    console.log(`üìÅ Output file: ${OUTPUT_FILE}`);
    
    // Create local-docs directory if it doesn't exist
    const localDocsDir = path.dirname(OUTPUT_FILE);
    if (!fs.existsSync(localDocsDir)) {
      fs.mkdirSync(localDocsDir, { recursive: true });
      console.log(`üìÇ Created directory: ${localDocsDir}`);
    }

    // Start building the SQL file
    let sqlContent = `-- Production Database Export
-- Generated on: ${new Date().toISOString()}
-- WARNING: This file contains production data - DO NOT COMMIT TO REMOTE REPOSITORY
-- 
-- This file is automatically generated by scripts/export-production-data.js
-- and should be used only for staging environment synchronization.

-- Disable foreign key checks during import
SET session_replication_role = replica;

`;

    console.log('üìä Exporting table schemas and data...');

    for (const table of TABLES_TO_EXPORT) {
      console.log(`  üìã Exporting table: ${table}`);
      
      try {
        // Export table schema (without foreign key constraints to avoid dependency issues)
        const schemaCommand = `pg_dump "${PRODUCTION_DATABASE_URL}" --schema-only --table="${table}" --no-owner --no-privileges`;
        let schemaOutput = execSync(schemaCommand, { encoding: 'utf8' });
        
        // Clean up schema output - remove foreign key constraints, invalid commands, and pg_dump headers
        schemaOutput = schemaOutput
          .replace(/\\restrict\s+[^\n]+/g, '') // Remove \restrict commands
          .replace(/\\unrestrict\s+[^\n]+/g, '') // Remove \unrestrict commands
          .replace(/ALTER TABLE[^;]*ADD CONSTRAINT[^;]*FOREIGN KEY[^;]*;/g, '') // Remove foreign key constraints
          .replace(/--\s*PostgreSQL database dump complete\s*--/g, '') // Remove dump complete markers
          .replace(/-- Dumped from database version[^\n]*\n/g, '') // Remove version info
          .replace(/-- Dumped by pg_dump version[^\n]*\n/g, '') // Remove pg_dump version info
          .replace(/SET statement_timeout = 0;[\s\S]*?SET row_security = off;\n\n/g, '') // Remove pg_dump headers
          .replace(/SET default_tablespace = '';\n\n/g, '') // Remove default tablespace setting
          .trim();
        
        // Export table data
        const dataCommand = `pg_dump "${PRODUCTION_DATABASE_URL}" --data-only --table="${table}" --no-owner --no-privileges --column-inserts`;
        let dataOutput = execSync(dataCommand, { encoding: 'utf8' });
        
        // Clean up data output - remove invalid commands, dump markers, and duplicate headers
        dataOutput = dataOutput
          .replace(/\\restrict\s+[^\n]+/g, '') // Remove \restrict commands
          .replace(/\\unrestrict\s+[^\n]+/g, '') // Remove \unrestrict commands
          .replace(/--\s*PostgreSQL database dump complete\s*--/g, '') // Remove dump complete markers
          .replace(/SET statement_timeout = 0;[\s\S]*?SET row_security = off;\n\n/g, '') // Remove duplicate pg_dump headers
          .replace(/-- Dumped from database version[^\n]*\n/g, '') // Remove version info
          .replace(/-- Dumped by pg_dump version[^\n]*\n/g, '') // Remove pg_dump version info
          .trim();
        
        // Add to SQL content
        sqlContent += `\n-- Table: ${table}\n`;
        if (schemaOutput) {
          sqlContent += `-- Schema\n${schemaOutput}\n\n`;
        }
        if (dataOutput) {
          sqlContent += `-- Data\n${dataOutput}\n\n`;
        }
        
      } catch (error) {
        console.warn(`  ‚ö†Ô∏è  Warning: Could not export table ${table}: ${error.message}`);
        sqlContent += `\n-- Warning: Table ${table} could not be exported\n-- Error: ${error.message}\n`;
        if (error.stderr) {
          const stderrLines = error.stderr.split('\n');
          stderrLines.forEach(line => {
            if (line.trim()) {
              sqlContent += `-- ${line}\n`;
            }
          });
        }
        sqlContent += '\n';
      }
    }

    // Add foreign key re-enable
    sqlContent += `
-- Re-enable foreign key checks
SET session_replication_role = DEFAULT;

-- Export completed successfully
-- Total tables processed: ${TABLES_TO_EXPORT.length}
-- Generated on: ${new Date().toISOString()}
`;

    // Write to file
    fs.writeFileSync(OUTPUT_FILE, sqlContent, 'utf8');
    
    console.log('‚úÖ Production data export completed successfully!');
    console.log(`üìÑ SQL file created: ${OUTPUT_FILE}`);
    console.log(`üìä Tables exported: ${TABLES_TO_EXPORT.length}`);
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANT SECURITY NOTES:');
    console.log('   - This file contains production data');
    console.log('   - DO NOT commit this file to remote repository');
    console.log('   - Use only for staging environment synchronization');
    console.log('   - Delete this file after staging sync is complete');
    
  } catch (error) {
    console.error('‚ùå Export failed:', error.message);
    console.error('');
    console.error('üîß Troubleshooting:');
    console.error('   - Ensure pg_dump is installed and accessible');
    console.error('   - Verify production database connection');
    console.error('   - Check network connectivity to production database');
    process.exit(1);
  }
}

// Run the export if this script is executed directly
if (require.main === module) {
  exportProductionData();
}

module.exports = { exportProductionData };