name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Run linting
        run: |
          npm run lint
          cd backend && npm run lint

      - name: Run type checking
        run: |
          npm run type-check
          cd backend && npm run type-check

      - name: Run tests
        run: |
          npm run test
          cd backend && npm run test

      - name: Run security audit
        run: |
          npm audit --audit-level high
          cd backend && npm audit --audit-level high

  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest
            type=raw,value=production

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create database backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST_PRODUCTION }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Create backup directory
            mkdir -p /opt/backups/$(date +%Y-%m-%d)
            
            # Backup database (if using PostgreSQL on the same server)
            # docker-compose exec -T postgres pg_dump -U mimi mimivibe_prod > /opt/backups/$(date +%Y-%m-%d)/db-backup-$(date +%H%M%S).sql

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST_PRODUCTION }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to project directory
            cd /opt/mimivibe-production
            
            # Pull latest changes
            git fetch origin
            git checkout main
            git pull origin main
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=production
            DATABASE_URL=${{ secrets.DATABASE_URL_PRODUCTION }}
            REDIS_URL=redis://localhost:6379
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GOOGLE_GENERATIVE_AI_API_KEY=${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
            PROMPT_ENCRYPTION_KEY=${{ secrets.PROMPT_ENCRYPTION_KEY }}
            ALLOWED_ORIGINS=https://mimivibe-ai.vercel.app
            LOG_LEVEL=info
            EOF
            
            # Pull latest Docker image
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
            
            # Rolling update strategy
            # Start new containers with different names
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps --scale backend=2 --scale worker=2
            
            # Wait for new containers to be healthy
            sleep 60
            
            # Run database migrations
            docker-compose exec -T backend npm run db:migrate
            
            # Health check on new containers
            curl -f http://localhost:3001/health || exit 1
            
            # Stop old containers (rolling update)
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale backend=1 --scale worker=1
            
            # Final health check
            sleep 30
            curl -f http://localhost:3001/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env NEXT_PUBLIC_API_URL=https://${{ secrets.DO_HOST_PRODUCTION }}:3001'
          working-directory: ./

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Basic smoke tests
          curl -f https://mimivibe-ai.vercel.app/health || exit 1
          curl -f https://${{ secrets.DO_HOST_PRODUCTION }}:3001/health || exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            Automated production deployment
            
            **Changes:**
            ${{ github.event.head_commit.message }}
            
            **Commit:** ${{ github.sha }}
            **Deployed at:** ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false