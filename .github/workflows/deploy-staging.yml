name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Run linting
        run: |
          npm run lint
          cd backend && npm run lint

      - name: Run type checking
        run: |
          npm run type-check
          cd backend && npm run type-check

      - name: Run tests
        run: |
          npm run test
          cd backend && npm run test

  build-and-deploy:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST_STAGING }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to project directory
            cd /opt/mimivibe-staging
            
            # Pull latest changes
            git fetch origin
            git checkout staging
            git pull origin staging
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=staging
            DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}
            REDIS_URL=redis://localhost:6379
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GOOGLE_GENERATIVE_AI_API_KEY=${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
            PROMPT_ENCRYPTION_KEY=${{ secrets.PROMPT_ENCRYPTION_KEY }}
            ALLOWED_ORIGINS=https://mimivibe-ai-staging.vercel.app
            LOG_LEVEL=debug
            EOF
            
            # Pull latest Docker image
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
            
            # Stop existing containers
            docker-compose down || true
            
            # Start services
            docker-compose up -d redis backend worker
            
            # Wait for services to be healthy
            sleep 30
            
            # Run database migrations
            docker-compose exec -T backend npm run db:migrate
            
            # Health check
            curl -f http://localhost:3001/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env NEXT_PUBLIC_API_URL=https://${{ secrets.DO_HOST_STAGING }}:3001'
          working-directory: ./

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}