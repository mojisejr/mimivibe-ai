import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedRewards() {
  console.log('üéÅ Starting reward configuration seeding...')

  // Default reward configurations
  const rewards = [
    // Referral System Rewards
    {
      name: 'REFERRAL_INVITER',
      type: 'referral',
      icon: 'üë•',
      title: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
      criteria: {
        eventType: 'referral_success',
        role: 'inviter'
      },
      rewards: {
        coins: 50
      }
    },
    {
      name: 'REFERRAL_INVITED',
      type: 'referral',
      icon: 'üéÅ',
      title: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
      criteria: {
        eventType: 'referral_success',
        role: 'invited'
      },
      rewards: {
        stars: 1
      }
    },

    // Achievement System Rewards
    {
      name: 'FIRST_READING',
      type: 'achievement',
      icon: 'üîÆ',
      title: '‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å',
      criteria: {
        eventType: 'reading_milestone',
        count: 1
      },
      rewards: {
        freePoint: 2
      }
    },
    {
      name: 'READING_MILESTONE_10',
      type: 'achievement',
      icon: '‚≠ê',
      title: '‡∏ô‡∏±‡∏Å‡∏î‡∏π‡∏î‡∏ß‡∏á',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏î‡∏π‡∏î‡∏ß‡∏á 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      criteria: {
        eventType: 'reading_milestone',
        count: 10
      },
      rewards: {
        coins: 25
      }
    },
    {
      name: 'READING_MILESTONE_50',
      type: 'achievement',
      icon: 'üåü',
      title: '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏î‡∏π‡∏î‡∏ß‡∏á 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      criteria: {
        eventType: 'reading_milestone',
        count: 50
      },
      rewards: {
        freePoint: 5
      }
    },
    {
      name: 'READING_MILESTONE_100',
      type: 'achievement',
      icon: 'üí´',
      title: '‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏î‡∏π‡∏î‡∏ß‡∏á 100 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      criteria: {
        eventType: 'reading_milestone',
        count: 100
      },
      rewards: {
        stars: 3
      }
    },

    // Level System Rewards
    {
      name: 'LEVEL_UP_10',
      type: 'level',
      icon: 'üèÜ',
      title: '‡πÄ‡∏•‡πÄ‡∏ß‡∏• 10',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏• 10',
      criteria: {
        eventType: 'level_milestone',
        level: 10
      },
      rewards: {
        coins: 30
      }
    },
    {
      name: 'LEVEL_UP_25',
      type: 'level',
      icon: 'üëë',
      title: '‡πÄ‡∏•‡πÄ‡∏ß‡∏• 25',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏• 25',
      criteria: {
        eventType: 'level_milestone',
        level: 25
      },
      rewards: {
        freePoint: 5
      }
    },

    // Daily Activity Rewards
    {
      name: 'DAILY_LOGIN',
      type: 'daily',
      icon: 'üìÖ',
      title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
      description: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
      criteria: {
        eventType: 'daily_activity',
        type: 'login'
      },
      rewards: {
        coins: 5
      }
    }
  ]

  let created = 0
  let updated = 0

  for (const reward of rewards) {
    try {
      const existing = await prisma.rewardConfiguration.findUnique({
        where: { name: reward.name }
      })

      if (existing) {
        await prisma.rewardConfiguration.update({
          where: { name: reward.name },
          data: {
            type: reward.type,
            icon: reward.icon,
            title: reward.title,
            description: reward.description,
            criteria: reward.criteria,
            rewards: reward.rewards,
            isActive: true
          }
        })
        updated++
      } else {
        await prisma.rewardConfiguration.create({
          data: reward
        })
        created++
      }
    } catch (error) {
      console.error(`Failed to seed reward ${reward.name}:`, error)
    }
  }

  console.log(`‚úÖ Reward seeding completed: ${created} created, ${updated} updated`)
}

async function seedExchangeSettings() {
  console.log('üí± Starting exchange settings seeding...')

  const exchangeSettings = [
    {
      exchangeType: 'COIN_TO_FREE_POINT',
      receivedItem: 'FREE_POINTS',
      coinPerUnit: 15,
      isActive: true,
      metadata: {
        description: '‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏ü‡∏£‡∏µ',
        minAmount: 15,
        maxAmount: 1000
      }
    },
    {
      exchangeType: 'COIN_TO_FREE_POINT_BONUS',
      receivedItem: 'FREE_POINTS',
      coinPerUnit: 12,
      isActive: false,
      metadata: {
        description: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)',
        minAmount: 100,
        maxAmount: 1000,
        bonusRate: true
      }
    }
  ]

  let created = 0
  let updated = 0

  for (const setting of exchangeSettings) {
    try {
      const existing = await prisma.exchangeSetting.findFirst({
        where: { 
          exchangeType: setting.exchangeType,
          coinPerUnit: setting.coinPerUnit
        }
      })

      if (existing) {
        await prisma.exchangeSetting.update({
          where: { id: existing.id },
          data: setting
        })
        updated++
      } else {
        await prisma.exchangeSetting.create({
          data: setting
        })
        created++
      }
    } catch (error) {
      console.error(`Failed to seed exchange setting ${setting.exchangeType}:`, error)
    }
  }

  console.log(`‚úÖ Exchange settings seeding completed: ${created} created, ${updated} updated`)
}

async function seedPackages() {
  console.log('üì¶ Starting payment packages seeding...')

  const packages = [
    {
      id: 1,
      title: 'Starter Pack',
      subtitle: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡∏π‡∏î‡∏ß‡∏á',
      price: 9900, // 99.00 THB in satang
      creditAmount: 10,
      ctaText: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢',
      popular: false,
      sortOrder: 1,
      metadata: {
        description: '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà',
        features: ['10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á', 'AI ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥']
      }
    },
    {
      id: 2,
      title: 'Popular Pack',
      subtitle: '‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
      price: 19900, // 199.00 THB in satang
      creditAmount: 25,
      ctaText: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢',
      popular: true,
      sortOrder: 2,
      metadata: {
        description: '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
        features: ['25 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á', 'AI ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á']
      }
    },
    {
      id: 3,
      title: 'Premium Pack',
      subtitle: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç',
      price: 39900, // 399.00 THB in satang
      creditAmount: 60,
      ctaText: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢',
      popular: false,
      sortOrder: 3,
      metadata: {
        description: '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å',
        features: ['60 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á', 'AI ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 15 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©']
      }
    }
  ]

  let created = 0
  let updated = 0

  for (const pack of packages) {
    try {
      const existing = await prisma.pack.findUnique({
        where: { id: pack.id }
      })

      if (existing) {
        await prisma.pack.update({
          where: { id: pack.id },
          data: pack
        })
        updated++
      } else {
        await prisma.pack.create({
          data: pack
        })
        created++
      }
    } catch (error) {
      console.error(`Failed to seed package ${pack.title}:`, error)
    }
  }

  console.log(`‚úÖ Package seeding completed: ${created} created, ${updated} updated`)
}

async function main() {
  try {
    console.log('üå± Starting comprehensive database seeding...')
    
    await seedRewards()
    await seedExchangeSettings()
    await seedPackages()
    
    console.log('‚úÖ All seeding operations completed successfully!')
  } catch (error) {
    console.error('‚ùå Seeding failed:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  main()
}

export { seedRewards, seedExchangeSettings, seedPackages }