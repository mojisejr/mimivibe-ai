generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Card {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  displayName    String
  arcana         String
  shortMeaning   String
  longMeaning    String
  longMeaningRaw String
  keywords       String
  imageUrl       String
  ReadingCard    ReadingCard[]
}

model CoinExchange {
  id             Int      @id @default(autoincrement())
  userId         String
  exchangeType   String
  coinAmount     Int
  receivedItem   String
  receivedAmount Int
  metadata       Json?
  status         String   @default("completed")
  createdAt      DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id])
}

model DailyLoginCampaign {
  id          String   @id @default(cuid())
  userId      String
  year        Int
  month       Int
  claimedDays Json     @default("[]") // Array of claimed day numbers
  streak      Int      @default(0)
  lastClaim   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year, month])
  @@map("daily_login_campaigns")
}


model ExchangeSetting {
  id           Int      @id @default(autoincrement())
  exchangeType String
  receivedItem String
  coinPerUnit  Int
  isActive     Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}


model Pack {
  id             Int              @id @default(autoincrement())
  title          String
  subtitle       String?
  ctaText        String           @default("ซื้อเลย")
  price          Int              // in cents (satang)
  creditAmount   Int              // stars to add
  metadata       Json?
  isActive       Boolean          @default(true)
  popular        Boolean          @default(false)
  sortOrder      Int              @default(0)
  PaymentHistory PaymentHistory[]
}

model PaymentHistory {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentId   String   @unique
  packId            Int
  amount            Int      // in cents (satang)
  currency          String   @default("thb")
  status            String   // succeeded, failed, pending
  creditsAdded      Int
  createdAt         DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pack Pack @relation(fields: [packId], references: [id])
}

model PointTransaction {
  id         String   @id
  userId     String
  eventType  String
  deltaPoint Int      @default(0)
  deltaCoins Int      @default(0)
  deltaExp   Int      @default(0)
  metadata   Json?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
}

model Reading {
  id          String        @id @default(cuid())
  userId      String
  question    String
  answer      Json          // Changed from String to Json for structured reading data
  type        String        @default("tarot")
  isDeleted   Boolean       @default(false)
  isReviewed  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       ReadingCard[]
  reviews     Review[]
  
  @@index([userId, createdAt])
  @@map("readings")
}

model ReadingCard {
  id        Int     @id @default(autoincrement())
  readingId String
  cardId    Int
  position  Int
  Card      Card    @relation(fields: [cardId], references: [id])
  Reading   Reading @relation(fields: [readingId], references: [id])
}

model ReferralCode {
  id           String   @id @default(cuid())
  userId       String
  code         String   @unique
  referredBy   String?  // userId who referred this user
  isUsed       Boolean  @default(false)
  usedAt       DateTime?
  createdAt    DateTime @default(now())
  
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  referrer User? @relation("UserReferrals", fields: [referredBy], references: [id])
  
  @@map("referral_codes")
}


model RequestLog {
  id        Int      @id @default(autoincrement())
  userId    String?
  ip        String
  endpoint  String
  createdAt DateTime @default(now())

  @@index([ip, endpoint, createdAt])
  @@index([userId, endpoint, createdAt])
}

model Review {
  id            Int      @id @default(autoincrement())
  readingId     String
  userId        String
  liked         Boolean  @default(false)
  accurateLevel Float?
  createdAt     DateTime @default(now())
  reviewPeriod  Int?
  Reading       Reading  @relation(fields: [readingId], references: [id])
  User          User     @relation(fields: [userId], references: [id])
}

model User {
  id                                                       String                @id
  lineId                                                   String?               @unique
  email                                                    String?               @unique
  name                                                     String?
  tel                                                      String?
  imageUrl                                                 String?
  createdAt                                                DateTime              @default(now())
  updatedAt                                                DateTime
  stars                                                    Int                   @default(0)
  coins                                                    Int                   @default(0)
  exp                                                      Int                   @default(0)
  level                                                    Int                   @default(1)
  freePoint                                                Int                   @default(0)
  role                                                     UserRole              @default(USER)
  prestigeLevel                                            Int                   @default(0)
  prestigePoints                                           Int                   @default(0)
  CoinExchange                                             CoinExchange[]
  PaymentHistory                                           PaymentHistory[]
  PointTransaction                                         PointTransaction[]
  Reading                                                  Reading[]
  ReferralCode                                             ReferralCode[]
  referredUsers                                            ReferralCode[]        @relation("UserReferrals")
  dailyLoginCampaigns                                      DailyLoginCampaign[]
  Review                                                   Review[]
  UserLimit                                                UserLimit[]
}


model UserLimit {
  id      Int      @id @default(autoincrement())
  userId  String
  window  String
  max     Int
  used    Int      @default(0)
  resetAt DateTime
  User    User     @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum TransactionType {
  COIN_TO_STAR
  STRIPE_TOPUP
  REWARD
  REFERRAL
  EXCHANGE
}

enum UserRole {
  USER
  ADMIN
}
