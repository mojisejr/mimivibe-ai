generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Card {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  displayName    String
  arcana         String
  shortMeaning   String
  longMeaning    String
  longMeaningRaw String
  keywords       String
  imageUrl       String
  ReadingCard    ReadingCard[]
}

model CoinExchange {
  id             Int      @id @default(autoincrement())
  userId         String
  exchangeType   String
  coinAmount     Int
  receivedItem   String
  receivedAmount Int
  metadata       Json?
  status         String   @default("completed")
  createdAt      DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id])
}

model CampaignTemplate {
  id        String    @id @default(cuid())
  name      String
  type      String
  isActive  Boolean   @default(true)
  rewards   Json
  metadata  Json?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("campaign_templates")
}

model ExchangeSetting {
  id           Int      @id @default(autoincrement())
  exchangeType String
  receivedItem String
  coinPerUnit  Int
  isActive     Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Pack {
  id             Int              @id @default(autoincrement())
  title          String
  subtitle       String?
  ctaText        String           @default("ซื้อเลย")
  price          Int
  creditAmount   Int
  metadata       Json?
  isActive       Boolean          @default(true)
  popular        Boolean          @default(false)
  sortOrder      Int              @default(0)
  PaymentHistory PaymentHistory[]
}

model PaymentHistory {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  packId          Int
  amount          Int
  currency        String   @default("thb")
  status          String
  creditsAdded    Int
  createdAt       DateTime @default(now())
  pack            Pack     @relation(fields: [packId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PointTransaction {
  id         String   @id
  userId     String
  eventType  String
  deltaPoint Int      @default(0)
  deltaCoins Int      @default(0)
  deltaExp   Int      @default(0)
  metadata   Json?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
}

model PrestigeReward {
  id            String   @id @default(cuid())
  prestigeLevel Int      @unique
  rewardType    String
  value         Float
  description   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("prestige_rewards")
}

model RewardConfiguration {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String
  icon        String
  title       String
  description String
  criteria    Json
  rewards     Json
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reward_configurations")
}

model Reading {
  id         String        @id @default(cuid())
  userId     String
  question   String
  answer     Json
  type       String        @default("tarot")
  isDeleted  Boolean       @default(false)
  isReviewed Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  cards      ReadingCard[]
  reviews    Review[]
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("readings")
}

model ReadingCard {
  id        Int     @id @default(autoincrement())
  readingId String
  cardId    Int
  position  Int
  Card      Card    @relation(fields: [cardId], references: [id])
  Reading   Reading @relation(fields: [readingId], references: [id])
}

model ReferralCode {
  id         String    @id @default(cuid())
  userId     String
  code       String    @unique
  referredBy String?
  isUsed     Boolean   @default(false)
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  referrer   User?     @relation("UserReferrals", fields: [referredBy], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("referral_codes")
}

model Review {
  id            Int      @id @default(autoincrement())
  readingId     String
  userId        String
  liked         Boolean  @default(false)
  accurateLevel Float?
  createdAt     DateTime @default(now())
  reviewPeriod  Int?
  Reading       Reading  @relation(fields: [readingId], references: [id])
  User          User     @relation(fields: [userId], references: [id])
}

model User {
  id               String             @id
  lineId           String?            @unique
  email            String?            @unique
  name             String?
  tel              String?
  imageUrl         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  stars            Int                @default(0)
  coins            Int                @default(0)
  exp              Int                @default(0)
  level            Int                @default(1)
  freePoint        Int                @default(0)
  role             UserRole           @default(USER)
  prestigeLevel    Int                @default(0)
  prestigePoints   Int                @default(0)
  CoinExchange     CoinExchange[]
  PaymentHistory   PaymentHistory[]
  PointTransaction PointTransaction[]
  Review           Review[]
  Reading          Reading[]
  referredUsers    ReferralCode[]     @relation("UserReferrals")
  ReferralCode     ReferralCode[]
}

model PromptTemplate {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(100)
  encryptedContent String             @map("encrypted_content")
  version          Int                @default(1)
  isActive         Boolean            @default(true) @map("is_active")
  description      String?
  performanceNotes String?            @map("performance_notes")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  testResults      PromptTestResult[]
  versions         PromptVersion[]

  @@map("prompt_templates")
}

model PromptVersion {
  id                 Int            @id @default(autoincrement())
  templateId         Int            @map("template_id")
  version            Int
  encryptedContent   String         @map("encrypted_content")
  isActive           Boolean        @default(false) @map("is_active")
  description        String?
  performanceMetrics Json?          @map("performance_metrics")
  createdAt          DateTime       @default(now()) @map("created_at")
  template           PromptTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, version])
  @@map("prompt_versions")
}

model PromptTestResult {
  id              Int            @id @default(autoincrement())
  templateId      Int            @map("template_id")
  version         Int
  testQuestion    String         @map("test_question")
  resultData      Json           @map("result_data")
  executionTimeMs Int?           @map("execution_time_ms")
  tokenUsage      Int?           @map("token_usage")
  aiProvider      String?        @map("ai_provider") @db.VarChar(50)
  createdAt       DateTime       @default(now()) @map("created_at")
  template        PromptTemplate @relation(fields: [templateId], references: [id])

  @@index([templateId, createdAt])
  @@map("prompt_test_results")
}

model PromptAccessLog {
  id              Int      @id @default(autoincrement())
  promptName      String
  accessType      String
  userId          String?
  ipAddress       String?
  userAgent       String?
  success         Boolean
  errorMessage    String?
  executionTimeMs Int?
  metadata        Json?
  createdAt       DateTime @default(now())

  @@index([promptName])
  @@index([userId])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([success])
  @@map("prompt_access_logs")
}

model SecurityAlert {
  id          Int      @id @default(autoincrement())
  alertType   String
  severity    String
  description String
  userId      String?
  ipAddress   String?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([alertType])
  @@index([severity])
  @@index([userId])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("security_alerts")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum TransactionType {
  COIN_TO_STAR
  STRIPE_TOPUP
  REWARD
  REFERRAL
  EXCHANGE
}

enum UserRole {
  USER
  ADMIN
}
